stages:
  - build
  - deploy

build_frontend:
  stage: build
  image: node:latest
  script:
    - echo "Starting building frontend app ..."
    - cd Front/
    - npm install --save-dev
    - npm run build
    - echo "Frontend Build successfully!  :D"
  artifacts:
    paths:
      - Front/dist/*
  only:
    - release
    - fix/broken-pipelines

build_backend:
  stage: build
  image: maven:3.8.3-openjdk-17
  script:
    - cd Back/catering
    - echo "Building app..."
    - mvn clean
    - mvn package -B -DRIVER_CLASS_NAME=''
    - mvn package -B -DB_URL=$DB_URL
    - mvn package -B -USER=$DB_USER
    - mvn package -B -PASSWORD=$DB_PASSWORD
    - mvn package -B -DB_PLATFORM=''
    - mvn package -B -H2_CONSOLE=false
    - mvn package -B -AccessKey=$AWS_ACCESS_KEY_ID
    - mvn package -B -SecretKey=$AWS_SECRET_ACCESS_KEY
    - mvn package -B -BucketName=$BUCKET_NAME
    - mvn package -B -URL_INSTANCE=$URL_EC2_INSTANCE
    - mvn package -B -MAIL_USERNAME=$MAIL_USERNAME_EMAIL
    - mvn package -B -MAIL_PASSWORD=$MAIL_PASSWORD_EMAIL
    - mvn clean install
    - echo "Finished building backend app :D"
  only:
    - release
    - fix/broken-pipelines

deploy_frontend_application:
  stage: deploy
  needs: [build_frontend]
  image: 
    name: amazon/aws-cli:latest
    entrypoint: [""]
  before_script:
    - aws --version
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION
  script:
    - echo "deploying frontend app ..."
    - cd Front/
    - aws s3 rm s3://equipo1-c1-bucket-frontend/assets --recursive
    - aws s3 rm s3://equipo1-c1-bucket-frontend/index.html
    - aws s3 rm s3://equipo1-c1-bucket-frontend/vite.svg
    - aws s3 sync dist/ s3://equipo1-c1-bucket-frontend
    - echo "Frontend deploy successfully!  :D"
  only:
    - release
    - fix/broken-pipelines

deploy_Backend:
  stage: deploy
  needs: [build_backend]
  image: alpine:3.11
  before_script:
    - apk update && apk add openssh-client bash
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$EC2_PRIVATE_ACCESS_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - touch ~/.ssh/config
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - ssh-keyscan -H 18.188.200.107 >> ~/.ssh/known_hosts
  script:
    - cd Back/catering/
    - export DRIVER_CLASS_NAME=''
    - export DB_URL=$DB_URL
    - export USER=$DB_USER
    - export PASSWORD=$DB_PASSWORD
    - export DB_PLATFORM=''
    - export H2_CONSOLE=''
    - export AccessKey=$AWS_ACCESS_KEY_ID
    - export SecretKey=$AWS_SECRET_ACCESS_KEY
    - export BucketName=$BUCKET_NAME
    - export URL_INSTANCE=$URL_EC2_INSTANCE
    - export MAIL_USERNAME=$MAIL_USERNAME_EMAIL
    - export MAIL_PASSWORD=$MAIL_PASSWORD_EMAIL
    - ssh -i ubuntu@18.188.200.107 "cd backendApp/ pkill -f catering-0.0.1-SNAPSHOT.jar rm -rf /home/ubuntu/backup/catering-0.0.1-SNAPSHOT.jar cp -r catering-0.0.1-SNAPSHOT.jar /home/ubuntu/backup rm -rf catering-0.0.1-SNAPSHOT.jar"
    - scp -i target/catering-0.0.1-SNAPSHOT.jar ubuntu@18.188.200.107:/home/ubuntu/backendApp
    - ssh -i ubuntu@18.188.200.107 cd backendApp/ java -jar catering-0.0.1-SNAPSHOT.jar &"
    - echo "Finished deploying backend app :D"
  only:
    - release
    - fix/broken-pipelines